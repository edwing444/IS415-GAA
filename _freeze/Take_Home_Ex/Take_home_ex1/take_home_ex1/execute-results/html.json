{
  "hash": "3f963127516db10d90396271cf639e1b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take Home Exercise 1: Geospatial Analytics for Social Good: Application of Spatial and Spatio-temporal Point Patterns Analysis to discover the geographical distribution of Armed Conflict in Myanmar\"\nauthor: \"edwin tan\"\nexecute: \n  eval: true\n  echo: true\n  freeze: true\n---\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, tmap, tidyverse,spatstat,raster,sparr)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#acled_sf <- read.csv(\"data/acled_mm.csv\") %>% \n  #st_as_sf(coords = c(\n    #\"longitude\",\"latitude\"),\n    #crs=4326) %>% \n # st_transform(crs = 32647) %>% \n # mutate(event_date = dmy(event_date))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Import the armed conflict data (2021-2024)\nconflict_data <- read.csv(\"data/acled_mm.csv\")\n\n# Import administrative boundary data for Myanmar\nboundary_data <- st_read(dsn=\"data\",\n                         layer = \"mmr_polbnda_adm1_250k_mimu_1\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `mmr_polbnda_adm1_250k_mimu_1' from data source \n  `C:\\edwing444\\IS415-GAA\\Take_Home_Ex\\Take_home_ex1\\data' using driver `ESRI Shapefile'\nSimple feature collection with 15 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.1721 ymin: 9.696844 xmax: 101.17 ymax: 28.54554\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n\n```{.r .cell-code}\n# Filter the dataset for the relevant event types\nconflict_filtered <- conflict_data %>%\n  filter(event_type %in% c(\"Battles\", \"Explosions/Remote violence\", \"Strategic developments\", \"Violence against civilians\"))\n\n# Convert the date column to Date format\nconflict_filtered <- conflict_filtered %>%\n  mutate(event_date = dmy(event_date))\n\n# Create a column for quarterly intervals (e.g., Q1 2021, Q2 2021, etc.)\nconflict_filtered <- conflict_filtered %>%\n  mutate(quarter = paste0(year(event_date), \"-Q\", quarter(event_date)))\n\n# Convert conflict data into an `sf` object with geometry\nconflict_sf <- st_as_sf(conflict_filtered, coords = c(\"longitude\", \"latitude\"), crs = 4326)\n\n# Ensure the boundary data and conflict data have the same CRS (coordinate reference system)\nconflict_sf <- st_transform(conflict_sf, st_crs(boundary_data))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#boundary_data <- st_read(dsn=\"data\",\n                         #layer = \"mmr_polbnda_adm1_250k_mimu_1\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Reproject the boundary data to UTM (use appropriate zone for Myanmar, e.g., UTM zone 47N)\n#boundary_data_projected <- st_transform(boundary_data, crs = 32647)\n\n# Reproject the conflict data to match\n#conflict_sf_projected <- st_transform(conflict_sf, crs = 32647)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Ensure the boundary data and conflict data have the same CRS (projected to UTM zone 47N)\nboundary_data_projected <- st_transform(boundary_data, crs = 32647)\nconflict_sf_projected <- st_transform(conflict_sf, crs = 32647)\n\n# Convert the boundary data to an owin object (window) for spatstat\nboundary_win <- as.owin(st_geometry(boundary_data_projected))\n\n# Convert conflict_sf_projected to ppp object\ncoords <- st_coordinates(conflict_sf_projected)\nconflict_ppp <- ppp(x = coords[,1], y = coords[,2], window = boundary_win)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: 6 points were rejected as lying outside the specified window\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: data contain duplicated points\n```\n\n\n:::\n\n```{.r .cell-code}\n# Perform KDE for a specific quarter (e.g., Q1 2021)\nkde_q1_2021 <- density.ppp(conflict_ppp, sigma = bw.diggle)\n\n# Convert KDE result into a raster object\nkde_raster <- raster(kde_q1_2021)\n\n# Check the range of values\nsummary(kde_q1_2021)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nreal-valued pixel image\n128 x 128 pixel array (ny, nx)\nenclosing rectangle: [-210008.6, 724647.6] x [1072026, 3158467] units\ndimensions of each pixel: 7300 x 16300.32 units\nImage is defined on a subset of the rectangular grid\nSubset area = 669515348322.876 square units\nSubset area fraction = 0.343\nPixel values (inside window):\n\trange = [-1.001327e-21, 4.83092e-06]\n\tintegral = 36362\n\tmean = 5.431093e-08\n```\n\n\n:::\n\n```{.r .cell-code}\n# Assign projection to the raster\ncrs(kde_raster) <- \"+proj=utm +zone=47 +datum=WGS84 +units=m +no_defs\"\n\ntm_shape(boundary_data_projected) + \n  tm_borders() + \n  tm_shape(kde_raster) +\n  tm_raster(palette = \"-Blues\",style = \"cont\", alpha = 0.6) +\n  tm_layout(title = \"KDE of Armed Conflict Events (Q1 2021)\")\n```\n\n::: {.cell-output-display}\n![](take_home_ex1_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Take a random sample of 1000 events if the dataset is large\nset.seed(123)  # Ensure reproducibility\nsampled_conflict_ppp <- conflict_ppp[sample(1:npoints(conflict_ppp), 1000)]\n# Compute Ripley's K function to analyze clustering or dispersion\nK <- Kest(sampled_conflict_ppp, correction = \"Ripley\")\n\n# Plot Ripley's K function\nplot(K, main = \"Ripley's K for Conflict Events (Q1 2021)\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Unique quarters\nquarters <- unique(conflict_filtered$quarter)\n\n# Define and apply the projected CRS\nutm_crs <- st_crs(32647)  # UTM Zone 48N\npar(mfcol=c(2,3))\nfor (q in quarters) {\n   # Filter data for the current quarter\n  conflict_q <- conflict_filtered %>% \n    filter(quarter == q)\n  # Add jitter to the longitude and latitude to avoid duplicated points\nconflict_q <- conflict_q %>% \n  mutate(jittered_longitude = jitter(longitude, factor = 0.0001),\n         jittered_latitude = jitter(latitude, factor = 0.0001))\n\n# Convert to sf object using jittered coordinates\nconflict_sf_q <- st_as_sf(conflict_q, coords = c(\"jittered_longitude\", \"jittered_latitude\"), crs = 4326)\n  \n  # Transform to projected CRS\n  conflict_sf_q_projected <- st_transform(conflict_sf_q, crs = utm_crs)\n  \n  # Convert boundary data to projected CRS and to owin object\n  #boundary_data_projected <- st_transform(boundary_data, crs = utm_crs)\n  #boundary_win <- as.owin(st_as_sf(boundary_data_projected))\n  \n  # Clip the jittered points to the boundary data\nconflict_sf_q_projected <- st_intersection(conflict_sf_q_projected, boundary_data_projected)\n  \n  # Extract coordinates and convert to ppp object\n  coords <- st_coordinates(conflict_sf_q_projected)\n  conflict_ppp_q <- ppp(x = coords[,1], y = coords[,2], window = boundary_win)\n  \n  # Compute KDE\n  kde <- density.ppp(conflict_ppp_q, sigma = bw.diggle)\n  \n  # Plot KDE with tmap\n \n    \n    plot(kde, main = paste(\"KDE for\", q))\n  \n  \n  \n}\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: attribute variables are assumed to be spatially constant throughout\nall geometries\nWarning: attribute variables are assumed to be spatially constant throughout\nall geometries\nWarning: attribute variables are assumed to be spatially constant throughout\nall geometries\nWarning: attribute variables are assumed to be spatially constant throughout\nall geometries\nWarning: attribute variables are assumed to be spatially constant throughout\nall geometries\nWarning: attribute variables are assumed to be spatially constant throughout\nall geometries\nWarning: attribute variables are assumed to be spatially constant throughout\nall geometries\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](take_home_ex1_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: attribute variables are assumed to be spatially constant throughout\nall geometries\nWarning: attribute variables are assumed to be spatially constant throughout\nall geometries\nWarning: attribute variables are assumed to be spatially constant throughout\nall geometries\nWarning: attribute variables are assumed to be spatially constant throughout\nall geometries\nWarning: attribute variables are assumed to be spatially constant throughout\nall geometries\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](take_home_ex1_files/figure-html/unnamed-chunk-8-2.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfor (q in quarters) {\n  # Filter data for the current quarter\n  conflict_q <- conflict_filtered %>% \n    filter(quarter == q)\n  \n  # Add jitter to the longitude and latitude to avoid duplicated points\n  conflict_q <- conflict_q %>% \n    mutate(jittered_longitude = jitter(longitude, factor = 0.0001),\n           jittered_latitude = jitter(latitude, factor = 0.0001))\n\n  # Convert to sf object using jittered coordinates\n  conflict_sf_q <- st_as_sf(conflict_q, coords = c(\"jittered_longitude\", \"jittered_latitude\"), crs = 4326)\n  \n  # Transform to projected CRS\n  conflict_sf_q_projected <- st_transform(conflict_sf_q, crs = utm_crs)\n  \n  # Convert boundary data to projected CRS and to owin object\n  boundary_data_projected <- st_transform(boundary_data, crs = utm_crs)\n  boundary_win <- as.owin(st_as_sf(boundary_data_projected))\n  \n  # Clip the jittered points to the boundary data\n  conflict_sf_q_projected <- st_intersection(conflict_sf_q_projected, boundary_data_projected)\n  \n  # Extract coordinates and convert to ppp object\n  coords <- st_coordinates(conflict_sf_q_projected)\n  conflict_ppp_q <- ppp(x = coords[,1], y = coords[,2], window = boundary_win)\n  \n  # Compute K-function\n  K_result <- Kest(conflict_ppp_q, correction = \"border\")\n  \n  # Plot the K-function\n  plot(K_result, main = paste(\"K-function for\", q), legend = FALSE)\n  \n  # Optionally, add theoretical vs. observed plot lines (e.g., K-Function minus CSR)\n  plot(K_result, . - r ~ r, main = paste(\"K-test deviation for\", q))\n}\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: attribute variables are assumed to be spatially constant throughout\nall geometries\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](take_home_ex1_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: attribute variables are assumed to be spatially constant throughout\nall geometries\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](take_home_ex1_files/figure-html/unnamed-chunk-9-2.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](take_home_ex1_files/figure-html/unnamed-chunk-9-3.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: attribute variables are assumed to be spatially constant throughout\nall geometries\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](take_home_ex1_files/figure-html/unnamed-chunk-9-4.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](take_home_ex1_files/figure-html/unnamed-chunk-9-5.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: attribute variables are assumed to be spatially constant throughout\nall geometries\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](take_home_ex1_files/figure-html/unnamed-chunk-9-6.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](take_home_ex1_files/figure-html/unnamed-chunk-9-7.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: attribute variables are assumed to be spatially constant throughout\nall geometries\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](take_home_ex1_files/figure-html/unnamed-chunk-9-8.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](take_home_ex1_files/figure-html/unnamed-chunk-9-9.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: attribute variables are assumed to be spatially constant throughout\nall geometries\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](take_home_ex1_files/figure-html/unnamed-chunk-9-10.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](take_home_ex1_files/figure-html/unnamed-chunk-9-11.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: attribute variables are assumed to be spatially constant throughout\nall geometries\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](take_home_ex1_files/figure-html/unnamed-chunk-9-12.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](take_home_ex1_files/figure-html/unnamed-chunk-9-13.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: attribute variables are assumed to be spatially constant throughout\nall geometries\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](take_home_ex1_files/figure-html/unnamed-chunk-9-14.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](take_home_ex1_files/figure-html/unnamed-chunk-9-15.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: attribute variables are assumed to be spatially constant throughout\nall geometries\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](take_home_ex1_files/figure-html/unnamed-chunk-9-16.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](take_home_ex1_files/figure-html/unnamed-chunk-9-17.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: attribute variables are assumed to be spatially constant throughout\nall geometries\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](take_home_ex1_files/figure-html/unnamed-chunk-9-18.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](take_home_ex1_files/figure-html/unnamed-chunk-9-19.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: attribute variables are assumed to be spatially constant throughout\nall geometries\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](take_home_ex1_files/figure-html/unnamed-chunk-9-20.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](take_home_ex1_files/figure-html/unnamed-chunk-9-21.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: attribute variables are assumed to be spatially constant throughout\nall geometries\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](take_home_ex1_files/figure-html/unnamed-chunk-9-22.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](take_home_ex1_files/figure-html/unnamed-chunk-9-23.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](take_home_ex1_files/figure-html/unnamed-chunk-9-24.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#conflict_sf_spatemp<-conflict_sf_projected %>% \n # mutate(DayofYear = yday(event_date)) %>% \n  #mutate(Month_num = month(event_date))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#conflict_sf_spatemp_month<-conflict_sf_spatemp %>% \n  #select(Month_num)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#conflict_sf_spatemp_ppp <- as.ppp(conflict_sf_spatemp_month)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#conflict_sf_spatemp_owin <-conflict_sf_spatemp_ppp[boundary_win]\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#st_kde <- spattemp.density(conflict_sf_spatemp_owin)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#tims <- c(1,2,3,4,5,6,7,8,9,10,11,12)\n#par(mfcol=c(2,3))#2rows,3 col\n#for (i in tims){\n# plot(st_kde,i,\n #      override.par=FALSE,\n #      fix.range=TRUE,\n #      main=paste(\"KDE at month\",i))\n#} \n```\n:::\n",
    "supporting": [
      "take_home_ex1_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}